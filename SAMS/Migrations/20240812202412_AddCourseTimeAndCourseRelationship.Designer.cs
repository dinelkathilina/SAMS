// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAMS.Data;

#nullable disable

namespace SAMS.Migrations
{
    [DbContext(typeof(AMSContext))]
    [Migration("20240812202412_AddCourseTimeAndCourseRelationship")]
    partial class AddCourseTimeAndCourseRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SAMS.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("LecturerID")
                        .HasColumnType("int");

                    b.Property<int?>("Semester")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("LecturerID");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.CourseTime", b =>
                {
                    b.Property<int>("CourseTimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseTimeID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("CourseTimeID");

                    b.HasIndex("CourseID");

                    b.ToTable("CourseTime", null, t =>
                        {
                            t.HasCheckConstraint("CK_CourseTime_Day", "[Day] BETWEEN 0 AND 6");
                        });
                });

            modelBuilder.Entity("SAMS.Models.Lecturer", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("Lecturer", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.Student", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CurrentSemester")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserID");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.Course", b =>
                {
                    b.HasOne("SAMS.Models.Lecturer", "Lecturer")
                        .WithMany("Courses")
                        .HasForeignKey("LecturerID")
                        .IsRequired()
                        .HasConstraintName("FK_Course_Lecturer");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("SAMS.Models.CourseTime", b =>
                {
                    b.HasOne("SAMS.Models.Course", "Course")
                        .WithMany("CourseTimes")
                        .HasForeignKey("CourseID")
                        .IsRequired()
                        .HasConstraintName("FK_Course_CourseID");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SAMS.Models.Lecturer", b =>
                {
                    b.HasOne("SAMS.Models.User", "User")
                        .WithOne("Lecturer")
                        .HasForeignKey("SAMS.Models.Lecturer", "UserID")
                        .IsRequired()
                        .HasConstraintName("FK_Lecturer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAMS.Models.Student", b =>
                {
                    b.HasOne("SAMS.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SAMS.Models.Student", "UserID")
                        .IsRequired()
                        .HasConstraintName("FK_Student_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SAMS.Models.Course", b =>
                {
                    b.Navigation("CourseTimes");
                });

            modelBuilder.Entity("SAMS.Models.Lecturer", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SAMS.Models.User", b =>
                {
                    b.Navigation("Lecturer");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
